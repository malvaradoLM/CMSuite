<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureEdit1.EditValue" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>